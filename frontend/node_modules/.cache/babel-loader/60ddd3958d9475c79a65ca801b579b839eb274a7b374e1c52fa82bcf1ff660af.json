{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nconst authApi = {\n  async login(username, password) {\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      username,\n      password\n    });\n    const {\n      token\n    } = response.data;\n    localStorage.setItem('token', token);\n    return token;\n  },\n  async register(userData) {\n    const response = await axios.post(`${API_URL}/auth/register`, userData);\n    const {\n      token\n    } = response.data;\n    localStorage.setItem('token', token);\n    return token;\n  },\n  logout() {\n    localStorage.removeItem('token');\n  },\n  getToken() {\n    return localStorage.getItem('token');\n  },\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n};\n\n// Add token to all requests\naxios.interceptors.request.use(config => {\n  const token = authApi.getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default authApi;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","authApi","login","username","password","response","post","token","data","localStorage","setItem","register","userData","logout","removeItem","getToken","getItem","isAuthenticated","interceptors","request","use","config","headers","Authorization","error","Promise","reject"],"sources":["/Users/apple/Desktop/FloodGuard/frontend/src/api/auth.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\nconst authApi = {\n  async login(username, password) {\n    const response = await axios.post(`${API_URL}/auth/login`, { username, password });\n    const { token } = response.data;\n    localStorage.setItem('token', token);\n    return token;\n  },\n\n  async register(userData) {\n    const response = await axios.post(`${API_URL}/auth/register`, userData);\n    const { token } = response.data;\n    localStorage.setItem('token', token);\n    return token;\n  },\n\n  logout() {\n    localStorage.removeItem('token');\n  },\n\n  getToken() {\n    return localStorage.getItem('token');\n  },\n\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n};\n\n// Add token to all requests\naxios.interceptors.request.use(\n  (config) => {\n    const token = authApi.getToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport default authApi; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,OAAO,GAAG;EACd,MAAMC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAC9B,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGT,OAAO,aAAa,EAAE;MAAEM,QAAQ;MAAEC;IAAS,CAAC,CAAC;IAClF,MAAM;MAAEG;IAAM,CAAC,GAAGF,QAAQ,CAACG,IAAI;IAC/BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;IACpC,OAAOA,KAAK;EACd,CAAC;EAED,MAAMI,QAAQA,CAACC,QAAQ,EAAE;IACvB,MAAMP,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGT,OAAO,gBAAgB,EAAEe,QAAQ,CAAC;IACvE,MAAM;MAAEL;IAAM,CAAC,GAAGF,QAAQ,CAACG,IAAI;IAC/BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;IACpC,OAAOA,KAAK;EACd,CAAC;EAEDM,MAAMA,CAAA,EAAG;IACPJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAEDC,QAAQA,CAAA,EAAG;IACT,OAAON,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC;EACtC,CAAC;EAEDC,eAAeA,CAAA,EAAG;IAChB,OAAO,CAAC,CAAC,IAAI,CAACF,QAAQ,CAAC,CAAC;EAC1B;AACF,CAAC;;AAED;AACAnB,KAAK,CAACsB,YAAY,CAACC,OAAO,CAACC,GAAG,CAC3BC,MAAM,IAAK;EACV,MAAMd,KAAK,GAAGN,OAAO,CAACc,QAAQ,CAAC,CAAC;EAChC,IAAIR,KAAK,EAAE;IACTc,MAAM,CAACC,OAAO,CAACC,aAAa,GAAG,UAAUhB,KAAK,EAAE;EAClD;EACA,OAAOc,MAAM;AACf,CAAC,EACAG,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAevB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}